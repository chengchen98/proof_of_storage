import random
import time
import math

# 2048位的超了。。

P_BITS = 1024
SAMPLES = 1000
time_total = 0

def fastModPow(x, t, p): #快速幂的实现
	"""x[0] = base """
	"""x[1] = power"""
	"""x[2] = modulus"""
	result = 1
	while(t > 0):
		if(t & 1): # 位运算加快判断奇偶
			result = result * x % p
		t = int(t / 2)
		x = x * x % p
	return result

if P_BITS == 64:
	p = 13758676365741467507
elif P_BITS == 128:
	p = 284966011836017917039797442435648636163
elif P_BITS == 256:
	p = 79128031240076844063259589759962924441255910968111729611693920152825864722707
elif P_BITS == 512:
	p = 10711734159436774894171334484137626675507759979749407253125221261168087448899876831488509454695461974257751111853456275453329348448922191916590010377596767
elif P_BITS == 1024:
	p = 158297696608074679654124946564912202999139663277505984894261981349837992769596165683700437968679604111373729258655046764462137227577322861762501627230418997487671809885760928375348392323002752945263359796693275288611323927303851169352900910708127230034239565388759941444235878668699843286794016470366892082267
elif P_BITS == 2048:
	p = 22287360226908822233992819736392944434475043692265646916055930477587645696682024041890820611728835974780990571065838330253841354283867699159271588286101147370436450708147936416639540332373863814027801664774471436354150618315722661359913455362721373024713389259210331115681727749894367904502907551083219287819263090154675250911168607561882294815102877332366368477130120481174929478405004375083454233478408080520257325818925705871467706311605717341130286381719809389913520035118471758580658821155908577746981648167876884576360004782560776732442189914352788858257527373771629598261282997979720455015240977446412661775607

for _ in range(SAMPLES):
    x = random.randrange(0, 2 ** (P_BITS - 1))
    tb = time.time()
    # ans = math.pow(x, (p - 1) / 2) % p
    ans = fastModPow(x, (p-1) // 2, p)
    te = time.time()
    time_total += te - tb
    # print(te - tb)

# print("avg:", time_total / SAMPLES)
f = open("src/vde/data/modpow", 'a')
f.write("p size, " + str(P_BITS) + ", samples, " + str(SAMPLES) + ", python, " + str(time_total / SAMPLES) + "\n\n")
f.close()

# 0.003